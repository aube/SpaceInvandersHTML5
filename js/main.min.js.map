{"version":3,"sources":["0_settings.js","entity.js","game.js","sounds.js","entities/boss.js","entities/bullet.js","entities/enemy.js","entities/explosion.js","entities/player.js","entities/star.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.min.js","sourcesContent":["'use strict';\n\n/*Настройки игры\nЗначение некоторых параметров пересчитываются в зависимости от типа данных:\n- Integer (кол-во пикселей),\n- Float (в процентах от ширины для X и высоты для Y экрана)\n- Array {x:[min,max],y:[min,max]} - rand(min,max)\nпри этом min и max так же могут быть Integer и Float\n*/\n\nvar Settings = Object.create(null);\n\n//Player\nSettings.player = {\n\twidth: .21\n\t,height: .05\n\t,power: 5\n\t,speed: {x:0.7, y:0.7}\n\t,marginBottom: .01\n\t,sprite: {width:39, height:25, top:0, len:1}\n}\n\n//Boss\nSettings.boss = {\n\twidth: .4\n\t,height: .08\n\t,power: 20\n\t,sprite: {width:252, height:135, top:115, len:1}\n\t,color: \"red\"\n\t,wave: {x:0.2, y:0.7}\n\t,speed: {x:50, y:140}\n}\n\n//Bullet\nSettings.bullet = {\n\twidth: 2 //px\n\t,height: 7 //px\n\t,power: 1\n\t,speed: {x:0, y:1.6}\n\t,color: \"yellow\"\n\t,sound: 'sounds/laser.mp3'\n}\n\n//Star\nSettings.star = {\n\twidth: 1 //px\n\t,height: 1 //px\n\t,speed: {x:10, y: [0.1, 4.1]}\n\t,color: \"white\"\n\t,limit: 50\n}\n\n\n//Armada - cетка для объектов enemy\nSettings.armada = {\n\tinrow: 7\n\t,rows: 3\n\t,width: .8\n\t,height: .2\n\t,marginTop: .2\n}\n\n//Enemies\n//если заполнен параметр wave и скорость объектов\n//различается (при указании min и max), объекты ломают строй\n//и начинают перемещаться хаотично\nSettings.enemy = {\n\thorisontalMargin: .4\n\t,power: 1\n\t,verticalMargin: .6\n\t,wave: {x:0.4, y:1.2}\n\t,speed: {x:30, y:40}\n\t,sprite: {width:38, height:28, top:78, len:1}\n}\n\n//Explosions\nSettings.explosion = {\n\tspeed: {x:0,y:0}\n\t,sprite: {width:512/13, height:38, top:32, len:12}\n\t,sound: 'sounds/boom2.mp3'\n}\n\n\n\n\n","//прототип для всех объектов в игре\n\nvar Entity = {\n\t\n\t/*\n\t * Дополнительные параметры поведения объектов\n\t * \n\tdestroyOnOutOfScreen - уничтожение объекта при выходе за границу экрана (true/false)\n\tcantOutOfScreen - запрет выхода за пределы экрана (true/false)\n\tdestroyOnEndAnimation - уничтожение объекта по завершении анимации (true/false)\n\ttargets - уничтожение при столкновении (тип объекта),\n\t*/\n\t\n\tdestroyOnOutOfScreen:false,\n\tcantOutOfScreen:false,\n\tdestroyOnEndAnimation:false,\n\ttargets:false,\n\t\n\t\n\t//пересчет координат,\n\t//вызов методов для контроля столкновений и выхода за границу экрана\n\tupdate:function(dt)\n\t{\n\t\t\n\t\tif (!this.checkOutOfScreen())\n\t\t\treturn false;\n\t\t\n\t\tif (!this.checkCollision())\n\t\t\treturn false;\n\t\t\n\t\t\n\t\tif (this.moveto.x !== false)\n\t\t{\n\t\t\tif (this.moveto.x == this.pos.x)\n\t\t\t\tthis.moveto.x = false;\n\t\t\telse if (this.moveto.x < this.pos.x)\n\t\t\t\tthis.pos.x -= Math.min(this.speed.x * dt, this.pos.x - this.moveto.x);\n\t\t\telse\n\t\t\t\tthis.pos.x += Math.min(this.speed.x * dt, this.moveto.x - this.pos.x);\n\t\t}\n\t\t\n\t\tif (this.moveto.y !== false)\n\t\t{\n\t\t\tif (this.moveto.y == this.pos.y)\n\t\t\t\tthis.moveto.y = false;\n\t\t\telse if (this.moveto.y < this.pos.y)\n\t\t\t\tthis.pos.y -= Math.min(this.speed.y * dt, this.pos.y - this.moveto.y);\n\t\t\telse\n\t\t\t\tthis.pos.y += Math.min(this.speed.y * dt, this.moveto.y - this.pos.y);\n\t\t}\n\t\t\n\t\t\n\t\tif (typeof this.wave == 'object')\n\t\t\tthis.waveCalculate();\n\t\t\n\t\tif (typeof this.sprite == 'object')\n\t\t{\n\t\t\tif (this.sprite.len > 1)\n\t\t\t\tthis.frame++;\n\t\t\t\n\t\t\tif (this.frame >= this.sprite.len)\n\t\t\t\tif (this.destroyOnEndAnimation)\n\t\t\t\t\treturn false;\n\t\t\t\telse\n\t\t\t\t\tthis.frame = 0;\n\t\t\t\n\t\t}\n\t\t\n\t\tthis.draw();\n\t\treturn true;\n\t}\n\t\n\t//рассчет волнообразного движения объекта (применяется в enemy)\n\t,waveCalculate: function()\n\t{\n\t\t\n\t\tvar offsetX = (Math.round((Math.random()) * 10) % 2 == 0 ? -1 : 1);\n\t\tvar offsetY = (Math.round((Math.random()) * 10) % 2 == 0 ? -1 : 1);\n\t\t\n\t\t\n\t\tif (this.wave.x && this.moveto.x === false)\n\t\t\tthis.moveto.x = offsetX * this.wave.x + this.pos0.x;\n\t\t\n\t\tif (this.wave.y && this.moveto.y === false)\n\t\t\tthis.moveto.y = offsetY * this.wave.y + this.pos0.y;\n\t\t\n\t}\n\t\n\t//проверка столкновения с указанным в настройках типом объекта\n\t,checkCollision: function(targetName)\n\t{\n\t\ttargetName = targetName || this.targets;\n\n\t\tif (targetName)\n\t\t{\n\t\t\tif (targetName instanceof Array) {\n\t\t\t\tvar n = 0;\n\t\t\t\tvar result = true;\n\t\t\t\twhile(targetName[n])\n\t\t\t\t\tresult *= this.checkCollision(targetName[n++]);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tvar targets = Game.Objects[targetName];\n\t\t\tif (targets && targets.length)\n\t\t\t\tfor(var n=0; n < targets.length; n++)\n\t\t\t\t{\n\t\t\t\t\tif (!(this.pos.x+this.width <= targets[n].pos.x\n\t\t\t\t\t\t|| this.pos.x > targets[n].pos.x+targets[n].width\n\t\t\t\t\t\t|| this.pos.y+this.height <= targets[n].pos.y\n\t\t\t\t\t\t|| this.pos.y > targets[n].pos.y+targets[n].height))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (targets[n].power <= this.power) {\n\t\t\t\t\t\t\ttargets[n].onDestroy();\n\t\t\t\t\t\t\ttargets.splice(n,1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttargets[n].power -= this.power;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t//столкновение\n\t//создание взрыва\n\t,onDestroy: function()\n\t{\n\t\tGame.registerObject(new Explosion(this.pos.x,this.pos.y, this.width,this.height));\n\t\t\n\t}\n\t\n\t//проверка выхода за границы экрана\n\t//уничтожение объекта \"star\" или запрет выхода \"player\"\n\t,checkOutOfScreen: function()\n\t{\n\t\tif (this.destroyOnOutOfScreen)\n\t\t{\n\t\t\tif (this.pos.x > canvas.width\n\t\t\t\t|| this.pos.x + this.width < 0\n\t\t\t\t|| this.pos.y > canvas.height\n\t\t\t\t|| this.pos.y + this.height < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif (this.cantOutOfScreen)\n\t\t{\n\t\t\tif (this.pos.x + this.width > canvas.width)\n\t\t\t\tthis.pos.x = canvas.width - this.width;\n\t\t\t\n\t\t\tif (this.pos.x < 0 )\n\t\t\t\tthis.pos.x = 0;\n\t\t\t\n\t\t\tif (this.pos.y + this.height > canvas.height)\n\t\t\t\tthis.pos.y = canvas.height - this.width;\n\t\t\t\n\t\t\tif (this.pos.y < 0)\n\t\t\t\tthis.pos.y = 0;\n\t\t\t\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t//отрисовка объекта\n\t//drawImage если указан спрайт\n\t//fillRect в остальных случаях\n\t,draw: function(){\n\t\tctx.save();\n\t\t\n\t\tif (typeof this.sprite == 'object')\n\t\t{\n\t\t\tctx.drawImage(spritesImage,\n\t\t\t\tthis.sprite.width * this.frame,\n\t\t\t\tthis.sprite.top,\n\t\t\t\tthis.sprite.width, this.sprite.height,\n\t\t\t\tthis.pos.x, this.pos.y, this.width, this.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tctx.fillStyle = this.color;\n\t\t\tctx.fillRect(this.pos.x, this.pos.y, this.width, this.height);\n\t\t}\n\t\tctx.restore();\n\t}\n\t\n\t//получение числовых параметров из настроек\n\t,getXY: function(paramName){\n\t\t\n\t\tvar x, y;\n\t\tvar param = Settings[this.type][paramName];\n\t\t\n\t\tfunction getX(x)\n\t\t{\n\t\t\treturn (''+x).indexOf('.') < 0 ? +x : canvas.width * x;\n\t\t}\n\t\t\n\t\tfunction getY(y)\n\t\t{\n\t\t\treturn (''+y).indexOf('.') < 0 ? +y : canvas.height * y;\n\t\t}\n\t\t\n\t\tif (typeof param.x === 'object')\n\t\t\tx = Math.floor((Math.random() * getX(param.x[1])) + getX(param.x[0]));\n\t\telse\n\t\t\tx = getX(param.x);\n\t\t\n\t\tif (typeof param.y === 'object')\n\t\t\ty = Math.floor((Math.random() * getY(param.y[1])) + getY(param.y[0]));\n\t\telse\n\t\t\ty = getY(param.y);\n\t\t\n\t\treturn {\n\t\t\tx:x,\n\t\t\ty:y\n\t\t}\n\t\t\n\t}\n\t\n\t\n}\n\n\n","\nvar SpaceInvandersHTML5 = function(width, height)\n{\n\tvar self = this;\n\t\t\n\tthis.level = 0;\n\tthis.gameOver = false;\n\t\n\t//loop parameters\n\tvar lastTime = Date.now();\n\tvar now = Date.now();\n\tvar dt = (now - lastTime) / 1000.0;\n\t\n\t//fps\n\tvar lastFpsUpdateTime = Date.now();\n\tvar fpsEl = document.getElementById('fps');\n\tvar fps = 0;\n\t\n\t//Коллекция для объектов {star:[],enemy:[],...}\n\tthis.Objects = Object.create(null);\n\n\n\t//проверка параметров игры\n\tthis.gameStates = function()\n\t{\n\t\t\n\t\tif (now - lastFpsUpdateTime > 1000)\n\t\t{\n\t\t\tlastFpsUpdateTime = now;\n\t\t\tfpsEl.innerHTML = fps.toFixed(0) + 'fps';\n\t\t}\n\t\t\n\t\t//all enemies destroed, new level begin\n\t\tif (self.Objects['enemy'] && self.Objects['enemy'].length == 0 &&\n\t\t\tself.Objects['boss'] && self.Objects['boss'].length == 0)\n\t\t{\n\t\t\tself.startNewLevel();\n\t\t}\n\t\t\n\t\t//player destroed, game over\n\t\tif (self.Objects['player'].length == 0)\n\t\t{\n\t\t\tself.gameOver = true;\n\t\t\tself.onGameOver();\n\t\t}\n\t\t\n\t}\n\t\n\t\n\t//начало игры и переход на следующий уровень\n\tthis.startNewLevel = function()\n\t{\n\t\tself.level++;\n\t\t\n\t\tSettings.enemy.wave={x:0.1,y:0.2};\n\t\tSettings.enemy.speed={x:0.05,y:0.05};\n\t\t\n\t\t\tself.registerObject(new Boss());\n\t\t\tSettings.enemy.speed = {x:[0.01,0.4],y:[0.01,0.4]};\n\t\t\tself.generateEnemies();\n\t\tif (self.level%2 == 0)\n\t\t{\n\t\t}\n\t\telse if (self.level%3 == 0)\n\t\t{\n\t\t\tSettings.enemy.speed = {x:[0.01,0.4],y:[0.01,0.4]};\n\t\t\tSettings.enemy.wave = {x:0.3,y:0.5};\n\t\t\tself.generateEnemies();\n\t\t}\n\t\t\n\t\tvar el = document.getElementById('level');\n\t\tel.innerHTML = 'level '+self.level;\n\t}\n\t\n\t\n\t//отображение надписи Game Over\n\tthis.onGameOver = function()\n\t{\n\t\tvar el = document.getElementById('gameOver');\n\t\tel.style.display = 'block';\n\t\tself.Objects.player = [];\n\t}\n\t\n\t\n\t//обновление координат объектов\n\tthis.update = function(dt)\n\t{\n\n\t\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\t\t\n\t\tfor (var type in self.Objects)\n\t\t{\n\t\t\tvar entType = self.Objects[type];\n\t\t\tfor (var n = 0; n < entType.length; n++)\n\t\t\t{\n\t\t\t\tif (!entType[n].update(dt))\n\t\t\t\t{\n\t\t\t\t\tentType.splice(n--,1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.generateStars();\n\t\t\n\t}\n\t\n\t\n\t//начало игры, установка основных параметров\n\t//создание корабля игрока\n\t//запуск цикла\n\tthis.start = function()\n\t{\n\t\tself.Objects = Object.create(null);\n\t\tself.gameOver = false;\n\t\tself.pause = false;\n\t\tself.level = 0;\n\t\t\n\t\tdocument.getElementById('gameOver').style.display = 'none';\n\t\t\n\t\tthis.generateStars();\n\t\t\n\t\t//create player ship\n\t\tself.registerObject(new Player());\n\t\t\n\t\tself.startNewLevel();\n\t\t\n\t\tself.loop();\n\t\t//debugger;\n\t}\n\t\n\t\n\t//создание вражеских кораблей по координатам,\n\t//указанным в сетке координат Settings.armada\n\tthis.generateEnemies = function()\n\t{\n\t\tfor (var r = 0; r < Settings.armada.rows; r++)\n\t\t{\n\t\t\tfor (var e = 0; e < Settings.armada.inrow; e++)\n\t\t\t{\n\t\t\t\tvar x = Settings.armada.cellwidth * e + Settings.armada.pos.x + Settings.enemy.margin.x;\n\t\t\t\tvar y = Settings.armada.cellheight * r + Settings.armada.pos.y + Settings.enemy.margin.y;\n\t\t\t\tself.registerObject(new Enemy(x,y));\n\t\t\t}\n\t\t}\n\t}\n\n\t//звёзды создаются рандомно по оси Х\n\t//и летят по оси Y с разной скоростью\n\tthis.generateStars = function()\n\t{\n\t\tif (!self.Objects.star)\n\t\t\tself.Objects.star = [];\n\t\twhile (self.Objects.star.length < Settings.star.limit)\n\t\t\tself.registerObject(new Star());\n\t}\n\t\n\t\n\t//инициализация, дополнительный рассчет параметров\n\t//загрузка очереди звуков\n\t//привязка событий\n\tthis.init = function()\n\t{\n\t\t//player\n\t\tSettings.player.width = Math.floor(canvas.width * Settings.player.width);\n\t\tSettings.player.height = Math.floor(canvas.height * Settings.player.height);\n\t\tSettings.player.width = (Settings.player.sprite.width / Settings.player.sprite.height) * Settings.player.height;\n\n\t\t//boss\n\t\tSettings.boss.width = Math.floor(canvas.width * Settings.boss.width);\n\t\tSettings.boss.height = Math.floor(canvas.height * Settings.boss.height);\n\t\tSettings.boss.width = (Settings.boss.sprite.width / Settings.boss.sprite.height) * Settings.boss.height;\n\n\t\t//armada cells\n\t\tSettings.armada.cellwidth = Math.floor(canvas.width * Settings.armada.width / Settings.armada.inrow);\n\t\tSettings.armada.cellheight = Math.floor(canvas.height * Settings.armada.height / Settings.armada.rows);\n\t\tSettings.armada.pos = {x:canvas.width * (1-Settings.armada.width) / 2, y:canvas.height * Settings.armada.marginTop};\n\n\t\t//enemies\n\t\tSettings.enemy.margin = {x:Settings.armada.cellwidth * Settings.enemy.horisontalMargin / 2, y:Settings.armada.cellheight * Settings.enemy.verticalMargin / 2};\n\t\tSettings.enemy.width = Math.floor(Settings.armada.cellwidth - Settings.enemy.margin.x * 2);\n\t\tSettings.enemy.height = Math.floor(Settings.armada.cellheight - Settings.enemy.margin.y * 2);\n\t\t//Settings.enemy.width = (Settings.enemy.sprite.width / Settings.enemy.sprite.height) * Settings.enemy.height;\n\t\t\n\t\t//sounds bind\n\t\tfor (var n in Settings)\n\t\t{\n\t\t\tif (Settings[n].sound)\n\t\t\t{\n\t\t\t\tSettings[n].sound = new SoundPool(Settings[n].sound);\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t//actions\n\t\tdocument.querySelector('#gameOver > a').addEventListener(\"click\", function(event){\n\t\t\tself.start();\n\t\t\tevent.preventDefault();\n\t\t});\n\t\t\n\t\tdocument.addEventListener(\"click\", function(event){\n\t\t\t\n\t\t\tif (Game.gameOver) return;\n\t\t\tif (event.target != canvas) return;\n\t\t\t\n\t\t\tvar player = self.Objects.player[0];\n\t\t\t\n\t\t\tplayer.moveto.x = event.clientX - player.width/2;\n\t\t\tplayer.moveto.y = event.clientY - player.height/2;\n\t\t\tself.registerObject(new Bullet(player.pos.x + player.width/2 , player.pos.y, ['enemy', 'boss']));\n\t\t});\n\t\t\n\n\t\t//poehali!\n\t\tself.start();\n\t\t\n\t}\n\n\t//основной цикл\n\tthis.loop = function()\n\t{\n\t\tnow = Date.now();\n\t\tdt = (now - lastTime) / 1000.0;\n\t\tfps = 1000 / (now - lastTime);\n\t\tlastTime = now;\n\t\t\n\t\tself.gameStates();\n\t\tself.update(dt);\n\t\t\n\t\trequestAnimationFrame(self.loop);\n\t}\n\n\t//добавление объекта в коллекцию\n\tthis.registerObject = function(Entity)\n\t{\n\t\t\n\t\tif (undefined == this.Objects[Entity.type])\n\t\t\tself.Objects[Entity.type] = [];\n\t\t\n\t\tself.Objects[Entity.type].push(Entity);\n\t\t\n\t\tif (typeof Settings[Entity.type].sound == 'object')\n\t\t\tSettings[Entity.type].sound.play();\n\t\t\n\t}\n\n};\n\n\n\n\n","\nfunction SoundPool(filename, size)\n{\n\tvar size = size || 10;\n\tvar sounds = [];\n\tvar current = 0;\n\n\tthis.init = function(type) {\n\t\tfor (var i = 0; i < size; i++)\n\t\t{\n\t\t\tvar sound = new Audio(filename);\n\t\t\tsound.volume = .3;\n\t\t\tsound.load();\n\t\t\tsounds.push(sound);\n\t\t}\n\t}();\n\n\tthis.play = function() {\n\t\tsounds[current].play();\n\t\tcurrent = (current + 1) % size;\n\t};\n}\n\n","function Boss()\n{\n\tvar x = canvas.width/2;\n\tvar y = canvas.height/2;\n\n\tthis.destroyOnOutOfScreen = false;\n\t\n\tthis.type = 'boss';\n\tthis.targets = 'player';\n\tthis.pos0 = {x: 0, y: 0};\n\tthis.pos0 = {x: x, y: y};\n\tthis.pos = {x: x, y: y};\n\tthis.moveto = {x: x, y: y};\n\t//this.pos = {x:10, y:10};\n\t\n\tthis.speed = this.getXY('speed');\n\tthis.wave = this.getXY('wave');\n\t\n\t\n\t//this.wave = {\n\t//\tx:Settings.armada.width * this.wave.x * canvas.width,\n\t//\ty:Settings.armada.height * this.wave.y * canvas.height\n\t//}\n\t\n\t//console.log(this.wave);\n\t\n\tthis.width = Settings.boss.width;\n\tthis.height = Settings.boss.height;\n\n\t//this.color = Settings.boss.color;\n\tthis.sprite = Settings.boss.sprite;\n\tthis.frame = 0;\n\tthis.power = Settings.boss.power;\n\n\tthis.draw();\n\t\n\t// this.getPosition = function()\n\t// {\n\t\t\n\t// }\n\t\n}\n\n\nBoss.prototype = Entity;\n","\nfunction Bullet(x, y, targets)\n{\n\t\n\tthis.type = 'bullet';\n\t\n\tthis.destroyOnOutOfScreen = true;\n\tthis.targets = targets;\n\t\n\t\n\tthis.width = Settings.bullet.width;\n\tthis.height = Settings.bullet.height;\n\tthis.pos = {x:x, y:y};\n\t\n\t\n\tthis.moveto = {\n\t\ty:-this.height*2,\n\t\tx:false\n\t}\n\t\n\tthis.speed = this.getXY('speed');\n\t\n\tthis.color = Settings.bullet.color;\n\tthis.power = Settings.bullet.power;\n\n\tthis.draw();\n\t\n\t\n}\nBullet.prototype = Entity;\n\n","function Enemy(x,y)\n{\n\t\n\tthis.destroyOnOutOfScreen = false;\n\t\n\tthis.type = 'enemy';\n\tthis.targets = 'player';\n\tthis.pos0 = {x:x, y:y};\n\tthis.pos = {x:x, y: y - Settings.armada.height*canvas.height - Settings.armada.marginTop*canvas.height};\n\t\n\tthis.moveto = {x:x, y:y};\n\t\n\tthis.width = Settings.enemy.width;\n\tthis.height = Settings.enemy.height;\n\t\n\tthis.speed = this.getXY('speed');\n\tthis.wave = this.getXY('wave');\n\t\n\t//this.wave = {\n\t//\tx:Settings.armada.width * this.wave.x * canvas.width,\n\t//\ty:Settings.armada.height * this.wave.y * canvas.height\n\t//}\n\t\n\t//console.log(this.wave);\n\t\n\t\n\tthis.color = Settings.enemy.color;\n\tthis.sprite = Settings.enemy.sprite;\n\tthis.frame = 0;\n\tthis.power = Settings.enemy.power;\n\n\tthis.draw();\n\t\n\tthis.getPosition = function()\n\t{\n\t\t\n\t}\n\t\n}\nEnemy.prototype = Entity;\n","\nfunction Explosion(x,y,width,height)\n{\n\t\n\tthis.type = 'explosion';\n\t\n\tthis.destroyOnEndAnimation = true;\n\t\n\tthis.width = width;\n\tthis.height = height;\n\tthis.pos = {x:x, y:y};\n\t\n\t\n\tthis.moveto = {\n\t\ty:-this.height,\n\t\tx:false\n\t}\n\t\n\tthis.speed = this.getXY('speed');\n\t\n\tthis.sprite = Settings.explosion.sprite;\n\tthis.frame = 0;\n\t\n\t\n\tthis.draw();\n\t\n\t\n}\nExplosion.prototype = Entity;\n","\nfunction Player()\n{\n\t\n\tthis.type = 'player';\n\t\n\t//this.cantOutOfScreen = true;\n\t\n\t\n\tthis.width = Settings.player.width;\n\tthis.height = Settings.player.height;\n\tthis.pos = {x:canvas.width/2, y:canvas.height - Settings.player.height - canvas.height*Settings.player.marginBottom};\n\t\n\t\n\tthis.moveto = {\n\t\ty:false,\n\t\tx:false\n\t}\n\t\n\tthis.speed = this.getXY('speed');\n\t\n\tthis.color = Settings.player.color;\n\tthis.sprite = Settings.player.sprite;\n\tthis.frame = 0;\n\tthis.power = Settings.player.power;\n\t\n\tthis.draw();\n\t\n\t\n}\nPlayer.prototype = Entity;\n","function Star()\n{\n\t\n\tthis.type = 'star';\n\t\n\tthis.destroyOnOutOfScreen = true;\n\t\n\tthis.moveto = {\n\t\tx:false,\n\t\ty: canvas.height+1\n\t};\n\t//console.log(this.moveto);\n\tthis.pos = {\n\t\tx:Math.floor((Math.random() * (canvas.width-1)) + 1),\n\t\ty:0\n\t};\n\t\n\tthis.width = Settings.star.width;\n\tthis.height = Settings.star.height;\n\t\n\tthis.speed = this.getXY('speed');\n\tthis.color = Settings.star.color;\n\t\n\tthis.draw();\n}\nStar.prototype = Entity;\n"],"sourceRoot":"/source/"}